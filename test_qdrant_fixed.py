#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ LlamaIndex
"""

import asyncio
import sys
import os
sys.path.append("src")

from rag_crawl.services.llama_service import LlamaIndexService
from rag_crawl.database.connection import get_db
from fastapi import UploadFile
import io

async def test_official_qdrant_approach():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ LlamaIndex"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ LlamaIndex...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = next(get_db())
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = LlamaIndexService(db)
    
    print("‚úÖ –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    try:
        vector_store = service._get_vector_store()
        print(f"‚úÖ QdrantVectorStore —Å–æ–∑–¥–∞–Ω: {type(vector_store).__name__}")
        print(f"   üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è: {vector_store.collection_name}")
        print(f"   üîå Client: {type(vector_store.client).__name__}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QdrantVectorStore: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å StorageContext
    try:
        index = service._get_index("test_namespace")
        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω: {type(index).__name__}")
        print(f"   üì¶ –ï—Å—Ç—å storage_context: {hasattr(index, 'storage_context')}")
        if hasattr(index, 'storage_context'):
            print(f"   üè™ Vector store –≤ context: {type(index.storage_context.vector_store).__name__}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å IngestionPipeline
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_content = """
        –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã RAG.
        
        OKR (Objectives and Key Results) - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—è–º–∏.
        OKR –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è–º —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö.
        
        –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã OKR:
        1. –¶–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–º–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º–∏
        2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑–º–µ—Ä–∏–º—ã–º–∏
        3. OKR –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –∫–≤–∞—Ä—Ç–∞–ª
        4. –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π —É—Å–ø–µ—Ö–∞ OKR
        
        –í–Ω–µ–¥—Ä–µ–Ω–∏–µ OKR –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã.
        """
        
        # –°–æ–∑–¥–∞–µ–º UploadFile –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        file_content = test_content.encode('utf-8')
        upload_file = UploadFile(
            filename="test_okr_document.txt",
            file=io.BytesIO(file_content),
            size=len(file_content),
            headers={"content-type": "text/plain"}
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document = await service.upload_document(upload_file, "test_namespace")
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {document.title}")
        print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {document.chunks_count}")
        print(f"   üÜî ID –≤ –ë–î: {document.id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    try:
        response = await service.query("–ß—Ç–æ —Ç–∞–∫–æ–µ OKR?", "test_namespace")
        print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   üîç –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(response.keys())}")
        if 'answer' in response:
            print(f"   üìù –û—Ç–≤–µ—Ç: {response['answer'][:100]}...")
        elif 'response' in response:
            print(f"   üìù –û—Ç–≤–µ—Ç: {response['response'][:100]}...")
        print(f"   üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(response.get('sources', []))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        if response['sources']:
            avg_score = sum(s.get('score', 0) for s in response['sources']) / len(response['sources'])
            print(f"   üìà –°—Ä–µ–¥–Ω–∏–π score —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {avg_score:.3f}")
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        response2 = await service.query("–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å OKR?", "test_namespace")
        print(f"‚úÖ –í—Ç–æ—Ä–æ–π –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(response2['sources'])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç
    try:
        chat_response = await service.chat("–û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã OKR", "test_namespace", "test_session")
        print(f"‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        answer_key = 'answer' if 'answer' in chat_response else 'response'
        print(f"   üí¨ –û—Ç–≤–µ—Ç: {chat_response[answer_key][:100]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! Qdrant –∏ LlamaIndex —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    return True

if __name__ == "__main__":
    result = asyncio.run(test_official_qdrant_approach())
    sys.exit(0 if result else 1) 