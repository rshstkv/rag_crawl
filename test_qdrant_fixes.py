#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —Å Qdrant
"""

import asyncio
import sys
import os
sys.path.append("src")

from rag_crawl.services.llama_service import LlamaIndexService
from rag_crawl.database.connection import get_db
from fastapi import UploadFile
import io


async def test_qdrant_fixes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å Qdrant"""
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Qdrant...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = next(get_db())
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = LlamaIndexService(db)
    
    print("‚úÖ –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant
    try:
        vector_store = service._get_vector_store()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant: {type(vector_store).__name__}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    print("\nüìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    with open("test_document.txt", "rb") as f:
        file_content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º UploadFile –æ–±—ä–µ–∫—Ç
    upload_file = UploadFile(
        filename="test_document.txt",
        file=io.BytesIO(file_content)
    )
    
    try:
        document = await service.upload_document(upload_file, namespace="test")
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {document.title}, —á–∞–Ω–∫–æ–≤: {document.chunks_count}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏...")
    
    test_queries = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ OKR?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —Ü–µ–ª–µ–π?", 
        "README —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",  # –î–æ–ª–∂–Ω–æ –Ω–µ –Ω–∞–π—Ç–∏ –Ω–∏—á–µ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ
    ]
    
    for query in test_queries:
        print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}'")
        try:
            result = await service.query(query, namespace="test")
            sources = result.get("sources", [])
            
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
            for source in sources:
                print(f"    üìÑ {source['document_title']} (score: {source['score']})")
            
            if len(sources) == 0:
                print("  ‚úÖ –ù–µ—Ç –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Ñ–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Qdrant –∫–æ–ª–ª–µ–∫—Ü–∏—é
    print(f"\nüóÉÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Qdrant...")
    try:
        client = vector_store.client
        collection_info = client.get_collection("docs_v2")
        vectors_count = collection_info.vectors_count
        print(f"  ‚úÖ –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {vectors_count}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(test_qdrant_fixes()) 