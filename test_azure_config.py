#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Azure OpenAI.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ .env –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import asyncio
from openai import AsyncAzureOpenAI
import sys

def load_env_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞."""
    env_path = Path('.env')
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    load_dotenv(env_path)
    
    config = {
        'api_key': os.getenv('AZURE_OPENAI_API_KEY'),
        'endpoint': os.getenv('AZURE_OPENAI_ENDPOINT'), 
        'api_version': os.getenv('AZURE_OPENAI_API_VERSION', '2024-05-01-preview'),
        'chat_deployment': os.getenv('AZURE_OPENAI_CHAT_DEPLOYMENT'),
        'embedding_deployment': os.getenv('AZURE_OPENAI_EMBEDDING_DEPLOYMENT')
    }
    
    return config

def print_config(config):
    """–í—ã–≤–æ–¥–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ API –∫–ª—é—á–∞)."""
    print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Azure OpenAI:")
    print(f"   Endpoint: {config['endpoint']}")
    print(f"   API Version: {config['api_version']}")
    print(f"   Chat Deployment: {config['chat_deployment']}")
    print(f"   Embedding Deployment: {config['embedding_deployment']}")
    print(f"   API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if config['api_key'] else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print()

def validate_config(config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."""
    required_fields = ['api_key', 'endpoint', 'chat_deployment', 'embedding_deployment']
    missing = [field for field in required_fields if not config.get(field)]
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(missing)}")
        return False
    
    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True

async def test_embedding_deployment(config):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç embedding deployment."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é embedding deployment...")
    
    try:
        client = AsyncAzureOpenAI(
            api_key=config['api_key'],
            api_version=config['api_version'],
            azure_endpoint=config['endpoint']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        response = await client.embeddings.create(
            model=config['embedding_deployment'],
            input="test"
        )
        
        print(f"‚úÖ Embedding deployment '{config['embedding_deployment']}' —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞: {len(response.data[0].embedding)}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ embedding deployment: {e}")
        return False

async def test_chat_deployment(config):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç chat deployment."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é chat deployment...")
    
    try:
        client = AsyncAzureOpenAI(
            api_key=config['api_key'],
            api_version=config['api_version'],
            azure_endpoint=config['endpoint']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —á–∞—Ç–∞
        response = await client.chat.completions.create(
            model=config['chat_deployment'],
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."}],
            max_tokens=50
        )
        
        print(f"‚úÖ Chat deployment '{config['chat_deployment']}' —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   –û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ chat deployment: {e}")
        return False

async def list_deployments(config):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö deployments."""
    print("üìã –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ deployments...")
    
    try:
        import httpx
        
        headers = {
            'api-key': config['api_key'],
            'Content-Type': 'application/json'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ deployments
        url = f"{config['endpoint'].rstrip('/')}/openai/deployments?api-version={config['api_version']}"
        
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            
            if response.status_code == 200:
                deployments = response.json()
                print("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ deployments:")
                for deployment in deployments.get('data', []):
                    print(f"   - {deployment.get('id')} ({deployment.get('model')})")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å deployments: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deployments: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Azure OpenAI")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_env_config()
    if not config:
        sys.exit(1)
    
    # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print_config(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not validate_config(config):
        sys.exit(1)
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º deployments
    embedding_ok = await test_embedding_deployment(config)
    print()
    
    chat_ok = await test_chat_deployment(config)
    print()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ deployments
    await list_deployments(config)
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("=" * 50)
    if embedding_ok and chat_ok:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! Azure OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Azure OpenAI.")
        if not embedding_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å embedding deployment")
        if not chat_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å chat deployment")

if __name__ == "__main__":
    asyncio.run(main()) 